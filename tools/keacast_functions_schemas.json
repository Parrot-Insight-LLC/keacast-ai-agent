[
  {
    "type": "function",
    "function": {
      "name": "getUserAccounts",
      "description": "Fetch bank accounts for a user with pagination support to prevent memory issues.",
      "parameters": {
        "type": "object",
        "properties": { 
          "page": { "type": "integer", "description": "Page number for pagination (default: 1)" },
          "limit": { "type": "integer", "description": "Number of accounts per page (default: 20, max: 100)" }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": { 
      "name": "getUserAccountData",
      "description": "Fetch account data for a user",
      "parameters": {
        "type": "object",
        "properties": {
          "body": { "type": "object" }
        },
        "required": ["body"]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "getUserData",
      "description": "Get user profile data including personal information, preferences, and account settings.",
      "parameters": {
        "type": "object",
        "properties": {},
        "required": [],
        "additionalProperties": false
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "getUserTransactions",
      "description": "Retrieve transactions for a user account in a date window with pagination support to prevent memory issues. If accountId is not provided, will use the account from the current session context.",
      "parameters": {
        "type": "object",
        "properties": {
          "accountId": { "type": "string", "description": "Account ID (optional if available in session context)" },
          "startDate": { "type": "string" },
          "endDate": { "type": "string" },
          "page": { "type": "integer", "description": "Page number for pagination (default: 1)" },
          "limit": { "type": "integer", "description": "Number of transactions per page (default: 50, max: 200)" }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "getRecurringForecasts",
      "description": "Get recurring/forecast transactions for an account with pagination support to prevent memory issues.",
      "parameters": {
        "type": "object",
        "properties": {
          "accountId": { "type": "string" },
          "page": { "type": "integer", "description": "Page number for pagination (default: 1)" },
          "limit": { "type": "integer", "description": "Number of forecasts per page (default: 25, max: 100)" }
        },
        "required": ["accountId"]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "getUpcomingTransactions",
      "description": "Get upcoming transactions for an account over a date range with pagination support to prevent memory issues.",
      "parameters": {
        "type": "object",
        "properties": {
          "accountId": { "type": "string" },
          "startDate": { "type": "string" },
          "endDate": { "type": "string" },
          "forecastType": { "type": "string" },
          "page": { "type": "integer", "description": "Page number for pagination (default: 1)" },
          "limit": { "type": "integer", "description": "Number of transactions per page (default: 30, max: 100)" }
        },
        "required": ["accountId", "startDate", "endDate"]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "getTransactionSummary",
      "description": "Get transaction summary statistics without loading full transaction data to prevent memory issues.",
      "parameters": {
        "type": "object",
        "properties": {
          "accountId": { "type": "string" },
          "startDate": { "type": "string" },
          "endDate": { "type": "string" }
        },
        "required": ["accountId"]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "getSelectedKeacastAccounts",
      "description": "Get comprehensive account data including transactions, balances, and account details. Returns structured data with: accountInfo (name, type, institution), currentBalances (available, current, credit limit, forecasted), transactionData (forecastedTransactions, recentTransactions, upcomingTransactions with counts), balanceHistory, categories, potentialRecurringTransactions, and summary statistics (totalTransactions, totalIncome, totalExpenses). All parameters automatically provided from session context.",
      "parameters": {
        "type": "object",
        "properties": {
          "body": { 
            "type": "object",
            "description": "The request body containing account selection parameters",
            "properties": {
              "currentDate": { 
                "type": "string", 
                "description": "The current date in YYYY-MM-DD format (default: current date)" 
              },
              "forecastType": { 
                "type": "string", 
                "description": "The forecast type (default: F)", 
                "enum": ["F"] 
              },
              "recentStart": { 
                "type": "string", 
                "description": "The recent start date in YYYY-MM-DD format (default: 3 months ago)" 
              },
              "recentEnd": { 
                "type": "string", 
                "description": "The recent end date in YYYY-MM-DD format (default: 1 day from current date)" 
              },
              "page": { 
                "type": "string", 
                "description": "The page type", 
                "enum": ["layout"] 
              },
              "position": { 
                "type": "integer", 
                "description": "The position", 
                "enum": [0] 
              },
              "selectedAccounts": { 
                "type": "array", 
                "description": "Array of selected account IDs",
                "items": { "type": "string" }
              },
              "upcomingEnd": { 
                "type": "string", 
                "description": "The upcoming end date in YYYY-MM-DD format (default: 14 days from current date)" 
              },
              "user": { 
                "type": "object", 
                "description": "The user data object" 
              }
            },
            "required": []
          }
        },
        "required": [],
        "additionalProperties": false
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "getBalances",
      "description": "Get account balances including posted, pending, and forecasted balances for a specific account. If accountId is not provided, will use the account from the current session context.",
      "parameters": {
        "type": "object",
        "properties": {
          "accountId": { 
            "type": "string", 
            "description": "The account ID to get balances for (optional if available in session context)" 
          }
        },
        "required": [],
        "additionalProperties": false
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "createTransaction",
      "description": "Creates financial forecasts or transactions with recurrence patterns. For recurring transactions, the system automatically generates multiple database records based on frequency, start date, and end date. Required inputs are amount, frequency, and start date. If amount, frequency, or start date fields have not been provided prompt the user to provide them. For all other fields (title,type, category, description, location, time, accountId, website, combined_id, monthlyTimeStamp, match_groupid, matchStatus, goal, merchant_name) insert the most relevant data based on the information provided. You can set the end date depending on the details you have recieved as well as the context you have been given of transaction data. Any spending transactions should be created as an expense and any income transactions should be created as an income. We want creating transactions to be as easy as possible for the user and we want to make sure that the user is aware of the financial implications of their actions.",
      "parameters": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "description": "The user ID for the transaction"
          },
          "accountId": {
            "type": "string", 
            "description": "The account ID for the transaction"
          },
          "title": {
            "type": "string",
            "description": "Transaction name"
          },
          "type": {
            "type": "string",
            "enum": ["expense", "income"],
            "description": "Transaction type - expense or income"
          },
          "category": {
            "type": "string",
            "description": "Transaction category"
          },
          "description": {
            "type": "string",
            "description": "Detailed description of the transaction"
          },
          "start": {
            "type": "string",
            "description": "Start date in ISO format (YYYY-MM-DDTHH:mm:ss.sssZ)"
          },
          "end": {
            "type": "string", 
            "description": "End date in ISO format (YYYY-MM-DDTHH:mm:ss.sssZ)"
          },
          "time": {
            "type": "string",
            "description": "Time of day in HH:mm format"
          },
          "amount": {
            "type": "number",
            "description": "Transaction amount (negative for expenses, positive for income)"
          },
          "location": {
            "type": "string",
            "description": "Location of the transaction"
          },
          "frequency": {
            "type": "number",
            "description": "Recurrence code: 1=Daily, 2=Once, 7=Weekly, 14=Bi-Weekly, 15=Semi-Monthly (1st & 15th), 16=Semi-Monthly (15th & end), 28-31=Monthly, 60=Bi-Monthly, 91=Quarterly, 182-183=Semi-Annually, 365-366=Annually"
          },
          "display_name": {
            "type": "string",
            "description": "Display name for UI"
          },
          "isAlreadyGrouped": {
            "type": "boolean",
            "default": false,
            "description": "Whether the transaction is already grouped"
          },
          "match_id": {
            "type": "string",
            "default": null,
            "description": "For bank transaction matching"
          },
          "website": {
            "type": "string",
            "default": null,
            "description": "URL or logo"
          },
          "combined_id": {
            "type": "string",
            "default": null,
            "description": "Combined ID (auto-generated if not provided)"
          },
          "monthlyTimeStamp": {
            "type": "boolean",
            "default": false,
            "description": "Whether to use monthly timestamp"
          },
          "match_groupid": {
            "type": "string",
            "default": null,
            "description": "Match group ID"
          },
          "matchStatus": {
            "type": "number",
            "default": 0,
            "description": "Match status"
          },
          "forecast_type": {
            "type": "string",
            "enum": ["F", "A", "RF"],
            "default": "F",
            "description": "F=Forecast, A=Actual, RF=Recurring Forecast"
          },
          "goal": {
            "type": "number",
            "default": null,
            "description": "Goal amount for savings"
          },
          "merchant_name": {
            "type": "string",
            "default": null,
            "description": "Merchant name"
          }
        },
        "required": ["accountId", "title", "type", "category", "description", "start", "end", "time", "amount", "location", "frequency", "display_name"]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "deleteTransaction",
      "description": "Deletes a transaction from the user's account. If the transaction is not found then return a message saying 'Transaction not found'. Always confirm with the user before deleting a transaction or a group of transactions. If the user is not sure about deleting a transaction then ask them to confirm their decision. Always list out the deleted transactions and the number of transactions deleted. Transactions can be deleted by their transactionid. If the user does not provide a transactionid then ask the user to provide it, else use the relevant information to find the transactionid found in context. Also you can only delete forecasted transaction and not actual transactions. If forecast_type is 'A' then return a message saying 'Transaction is an actual transaction and cannot be deleted'. If forecast_type is 'F' then delete the transaction.",
      "parameters": {
        "type": "object",
        "properties": {
          "transactionid": { "type": "number" }
        },
        "required": ["transactionid"]
      }
    }
  }
]
